{"version":3,"sources":["../../../src/@ionic-native/plugins/document-viewer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AA8B3C;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AASH;IAAoC,kCAAiB;IAArD;;IA4CA,CAAC;IA1CC;;;;OAIG;IAEH,uCAAc,GAAd,cAAiC,MAAM,CAAC,CAAC,CAAC;IAE1C;;;;;;;;;;OAUG;IAEH,wCAAe,GAAf,UAAgB,GAAW,EAAE,WAAmB,EAAE,OAA8B,EAAE,UAAqB,EAAE,YAAuB,EAAE,YAAuB,EAAE,OAAkB,IAAU,CAAC;IAExL;;;;;;;;;;OAUG;IAEH,qCAAY,GAAZ,UAAa,GAAW,EAAE,WAAmB,EAAE,OAA8B,EAAE,MAAiB,EAAE,OAAkB,EAAE,YAAuB,EAAE,OAAkB,IAAU,CAAC;IAEvK,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAnCA;QADC,OAAO,EAAE;;;;wDACgC;IAc1C;QADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;iEACuE,QAAQ,EAAiB,QAAQ,EAAiB,QAAQ,EAAY,QAAQ;;yDAAW;IAcxL;QADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;iEACgE,QAAQ,EAAY,QAAQ,EAAiB,QAAQ,EAAY,QAAQ;;sDAAW;IApCjK,cAAc;QAR1B,MAAM,CAAC;YACN,UAAU,EAAE,iBAAiB;YAC7B,MAAM,EAAE,gCAAgC;YACxC,SAAS,EAAE,0BAA0B;YACrC,IAAI,EAAE,8DAA8D;YACpE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACzC,CAAC;OAEW,cAAc,CA4C1B;IAAD,qBAAC;CA5CD,AA4CC,CA5CmC,iBAAiB,GA4CpD;SA5CY,cAAc","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport interface DocumentViewerOptions {\r\n  title?: string;\r\n  documentView?: {\r\n    closeLabel: string;\r\n  };\r\n  navigationView?: {\r\n    closeLabel: string;\r\n  };\r\n  email?: {\r\n    enabled: boolean;\r\n  };\r\n  print?: {\r\n    enabled: boolean;\r\n  };\r\n  openWith?: {\r\n    enabled: boolean;\r\n  };\r\n  bookmarks?: {\r\n    enabled: boolean;\r\n  };\r\n  search?: {\r\n    enabled: boolean;\r\n  };\r\n  autoClose?: {\r\n    onPause: boolean;\r\n  };\r\n}\r\n\r\n/**\r\n * @name Document Viewer\r\n * @description\r\n * This plugin offers a slim API to view PDF files which are either stored in the apps assets folder (/www/*) or in any other file system directory available via the cordova file plugin.\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { DocumentViewer } from '@ionic-native/document-viewer';\r\n *\r\n *\r\n * constructor(private document: DocumentViewer) { }\r\n *\r\n * ...\r\n * const options: DocumentViewerOptions = {\r\n *   title: 'My PDF'\r\n * }\r\n *\r\n * this.document.viewDocument('assets/myFile.pdf', 'application/pdf', options)\r\n *\r\n * ```\r\n *\r\n * @interfaces\r\n * DocumentViewerOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'Document Viewer',\r\n  plugin: 'cordova-plugin-document-viewer',\r\n  pluginRef: 'SitewaertsDocumentViewer',\r\n  repo: 'https://github.com/sitewaerts/cordova-plugin-document-viewer',\r\n  platforms: ['Android', 'iOS', 'Windows']\r\n})\r\n\r\nexport class DocumentViewer extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Displays the email composer pre-filled with data.\r\n   *\r\n   * @returns {Promise<any>} Resolves promise when the EmailComposer has been opened\r\n   */\r\n  @Cordova()\r\n  getSupportInfo(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Check if the document can be shown\r\n   *\r\n   * @param url {string} Url to the file\r\n   * @param contentType {string} Content type of the file\r\n   * @param options {Array<DocumentViewerOptions>} options\r\n   * @param [onPossible] {Function}\r\n   * @param [onMissingApp] {Function}\r\n   * @param [onImpossible] {Function}\r\n   * @param [onError] {Function}\r\n   */\r\n  @Cordova({ sync: true })\r\n  canViewDocument(url: string, contentType: string, options: DocumentViewerOptions, onPossible?: Function, onMissingApp?: Function, onImpossible?: Function, onError?: Function): void { }\r\n\r\n  /**\r\n   * Opens the file\r\n   *\r\n   * @param url {string} Url to the file\r\n   * @param contentType {string} Content type of the file\r\n   * @param options {DocumentViewerOptions} options\r\n   * @param [onShow] {Function}\r\n   * @param [onClose] {Function}\r\n   * @param [onMissingApp] {Function}\r\n   * @param [onError] {Function}\r\n   */\r\n  @Cordova({ sync: true })\r\n  viewDocument(url: string, contentType: string, options: DocumentViewerOptions, onShow?: Function, onClose?: Function, onMissingApp?: Function, onError?: Function): void { }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}