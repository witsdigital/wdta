{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/network/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,YAAY,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;AACvG,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,2BAA2B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwDN,2BAAiB;;;;IAgB5C;;;OAGG;;;;;IAEH,0BAAQ;;;;;QACN,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;KAChE;IAED;;;OAGG;;;;;IAKH,8BAAY;;;;kBAAsB,MAAM,CAAC,EAAE;IAE3C;;;OAGG;;;;;IAKH,2BAAS;;;;kBAAsB,MAAM,CAAC,EAAE;;gBA5CzC,UAAU;;;;;QAOR,eAAe;;;;QAOf,eAAe;;;;QAOf,YAAY,EAAE;;;wCACH,UAAU;2CAErB;;QAMA,OAAO,CAAC;YACP,eAAe,EAAE,IAAI;YACrB,KAAK,EAAE,SAAS;SACjB,CAAC;;;wCACc,UAAU;+CAAiB;;QAM1C,OAAO,CAAC;YACP,eAAe,EAAE,IAAI;YACrB,KAAK,EAAE,QAAQ;SAChB,CAAC;;;wCACW,UAAU;4CAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA3C7B,OAAO;QARnB,MAAM,CAAC;YACN,UAAU,EAAE,SAAS;YACrB,MAAM,EAAE,oCAAoC;YAC5C,SAAS,EAAE,sBAAsB;YACjC,IAAI,EAAE,8DAA8D;YACpE,SAAS,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,eAAe,CAAC;SACzI,CAAC;OAEW,OAAO,EA6CnB;kBAxGD;EA2D6B,iBAAiB;SAAjC,OAAO","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, CordovaProperty, Plugin, CordovaCheck, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/merge';\r\n\r\n\r\ndeclare const navigator: any;\r\n\r\n/**\r\n * @name Network\r\n * @description\r\n * Requires Cordova plugin: cordova-plugin-network-information. For more info, please see the [Network plugin docs](https://github.com/apache/cordova-plugin-network-information).\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { Network } from '@ionic-native/network';\r\n *\r\n * constructor(private network: Network) { }\r\n *\r\n * ...\r\n *\r\n * // watch network for a disconnect\r\n * let disconnectSubscription = this.network.onDisconnect().subscribe(() => {\r\n *   console.log('network was disconnected :-(');\r\n * });\r\n *\r\n * // stop disconnect watch\r\n * disconnectSubscription.unsubscribe();\r\n *\r\n *\r\n * // watch network for a connection\r\n * let connectSubscription = this.network.onConnect().subscribe(() => {\r\n *   console.log('network connected!');\r\n *   // We just got a connection but we need to wait briefly\r\n *â€¨   // before we determine the connection type. Might need to wait.\r\n *   // prior to doing any api requests as well.\r\n *   setTimeout(() => {\r\n *     if (this.network.type === 'wifi') {\r\n *       console.log('we got a wifi connection, woohoo!');\r\n *     }\r\n *   }, 3000);\r\n * });\r\n *\r\n * // stop connect watch\r\n * connectSubscription.unsubscribe();\r\n *\r\n * ```\r\n * @advanced\r\n * The `type` property will return one of the following connection types: `unknown`, `ethernet`, `wifi`, `2g`, `3g`, `4g`, `cellular`, `none`\r\n */\r\n@Plugin({\r\n  pluginName: 'Network',\r\n  plugin: 'cordova-plugin-network-information',\r\n  pluginRef: 'navigator.connection',\r\n  repo: 'https://github.com/apache/cordova-plugin-network-information',\r\n  platforms: ['Amazon Fire OS', 'Android', 'BlackBerry 10', 'Browser', 'Firefox OS', 'iOS', 'Tizen', 'Ubuntu', 'Windows', 'Windows Phone']\r\n})\r\n@Injectable()\r\nexport class Network extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Connection type\r\n   * @return {string}\r\n   */\r\n  @CordovaProperty\r\n  type: string;\r\n\r\n  /**\r\n   * Downlink Max Speed\r\n   * @return {string}\r\n   */\r\n  @CordovaProperty\r\n  downlinkMax: string;\r\n\r\n  /**\r\n   * Returns an observable to watch connection changes\r\n   * @return {Observable<any>}\r\n   */\r\n  @CordovaCheck()\r\n  onchange(): Observable<any> {\r\n    return Observable.merge(this.onConnect(), this.onDisconnect());\r\n  }\r\n\r\n  /**\r\n   * Get notified when the device goes offline\r\n   * @returns {Observable<any>} Returns an observable.\r\n   */\r\n  @Cordova({\r\n    eventObservable: true,\r\n    event: 'offline'\r\n  })\r\n  onDisconnect(): Observable<any> { return; }\r\n\r\n  /**\r\n   * Get notified when the device goes online\r\n   * @returns {Observable<any>} Returns an observable.\r\n   */\r\n  @Cordova({\r\n    eventObservable: true,\r\n    event: 'online'\r\n  })\r\n  onConnect(): Observable<any> { return; }\r\n\r\n}\r\n"]}